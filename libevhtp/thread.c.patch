diff --git a/libevhtp/thread.c b/third_party/libevhtp//libevhtp/thread.c
index dfddc7e..b57b86a 100644
--- a/libevhtp/thread.c
+++ b/third_party/libevhtp//libevhtp/thread.c
@@ -3,12 +3,14 @@
 #include <stdlib.h>
 #include <stdint.h>
 #include <limits.h>
-#ifndef WIN32
+#ifndef _WIN32
 #include <sys/queue.h>
-#endif
-
 #include <sys/ioctl.h>
 #include <unistd.h>
+#else
+#include "sys/queue.h"
+#endif
+
 #include <pthread.h>
 
 #include <event2/event.h>
@@ -17,29 +19,25 @@
 #include "internal.h"
 #include "evhtp/thread.h"
 
-typedef struct evthr_cmd        evthr_cmd_t;
-typedef struct evthr_pool_slist evthr_pool_slist_t;
-
+#ifdef _WIN32
+__pragma(pack(push, 1))
+#endif
 struct evthr_cmd {
     uint8_t  stop;
     void   * args;
     evthr_cb cb;
-} __attribute__((packed));
-
-TAILQ_HEAD(evthr_pool_slist, evthr);
-
-struct evthr_pool {
-#ifdef EVTHR_SHARED_PIPE
-    int rdr;
-    int wdr;
+}
+#ifdef _WIN32
+;
+__pragma(pack(pop))
+#pragma pop
+#else
+__attribute__((packed));
 #endif
-    int                nthreads;
-    evthr_pool_slist_t threads;
-};
 
 struct evthr {
-    int             rdr;
-    int             wdr;
+    evutil_socket_t rdr;
+    evutil_socket_t wdr;
     char            err;
     ev_t          * event;
     evbase_t      * evbase;
@@ -49,6 +47,7 @@ struct evthr {
     evthr_exit_cb   exit_cb;
     void          * arg;
     void          * aux;
+    int             busy;
 
 #ifdef EVTHR_SHARED_PIPE
     int            pool_rdr;
@@ -57,6 +56,20 @@ struct evthr {
     TAILQ_ENTRY(evthr) next;
 };
 
+TAILQ_HEAD(evthr_pool_slist, evthr);
+
+typedef struct evthr_cmd        evthr_cmd_t;
+typedef struct evthr_pool_slist evthr_pool_slist_t;
+
+struct evthr_pool {
+#ifdef EVTHR_SHARED_PIPE
+    int rdr;
+    int wdr;
+#endif
+    int                nthreads;
+    evthr_pool_slist_t threads;
+};
+
 #define _evthr_read(thr, cmd, sock) \
     (recv(sock, cmd, sizeof(evthr_cmd_t), 0) == sizeof(evthr_cmd_t)) ? 1 : 0
 
@@ -192,6 +205,14 @@ evthr_get_aux(evthr_t * thr)
     return thr ? thr->aux : NULL;
 }
 
+void
+evthr_set_busy(evthr_t * thr, int busy)
+{
+    if (thr) {
+        thr->busy = busy;
+    }
+}
+
 int
 evthr_set_initcb(evthr_t * thr, evthr_init_cb cb)
 {
@@ -220,7 +241,7 @@ static evthr_t *
 _evthr_new(evthr_init_cb init_cb, evthr_exit_cb exit_cb, void * args)
 {
     evthr_t * thread;
-    int       fds[2];
+    evutil_socket_t       fds[2];
 
     if (evutil_socketpair(AF_UNIX, SOCK_STREAM, 0, fds) == -1) {
         return NULL;
@@ -237,6 +258,7 @@ _evthr_new(evthr_init_cb init_cb, evthr_exit_cb exit_cb, void * args)
     thread->arg     = args;
     thread->rdr     = fds[0];
     thread->wdr     = fds[1];
+    thread->busy    = 0;
 
     thread->init_cb = init_cb;
     thread->exit_cb = exit_cb;
@@ -351,9 +373,17 @@ evthr_pool_stop(evthr_pool_t * pool)
 static inline int
 get_backlog_(evthr_t * thread)
 {
+    if (thread->busy) {
+        return INT_MAX;
+    }
     int backlog = 0;
+    int bytes_returned = 0;
 
+#ifdef _WIN32
+    WSAIoctl(thread->rdr, FIONREAD, NULL, 0, &backlog, 4, &bytes_returned, NULL, NULL);
+#else
     ioctl(thread->rdr, FIONREAD, &backlog);
+#endif
 
     return (int)(backlog / sizeof(evthr_cmd_t));
 }
@@ -486,7 +516,11 @@ evthr_pool_start(evthr_pool_t * pool)
             return -1;
         }
 
+#ifdef _WIN32
+        Sleep(5);
+#else
         usleep(5000);
+#endif
     }
 
     return 0;
